#!/usr/bin/env python3
# Compile a SAM program to C source

import sys
import yaml

prog = yaml.safe_load(sys.stdin.read())

INDENT = 2
def print_indented(s, level=0):
    print(f"{' ' * (level * INDENT)}{s},")

def recursive_len(item):
    if isinstance(item, list):
        return sum(recursive_len(subitem) for subitem in item) + 2
    else:
        return 1

def instruction(inst, op=None):
    s = f"SAM_INSN_{inst.upper()}"
    if op != None:
        s = f"(({op}) << SAM_OP_SHIFT) | {s}"
    return s

def compile_sam(l, level=0):
    while len(l) > 0:
        inst = l.pop(0)
        if isinstance(inst, list):
            print_indented(instruction("bra", recursive_len(inst) - 2), level)
            compile_sam(inst, level + 1)
            print_indented(instruction("ket", recursive_len(inst) - 2), level)
        elif inst.startswith("lit"):
            operand = inst.split(' ')[1]
            print_indented(instruction("lit", operand), level)
        elif inst == "push":
            operand = l.pop(0)
            print_indented(instruction("push", f"{operand} >> SAM_OP_SHIFT"))
            print_indented(instruction("_push", f"{operand} & SAM_OP_MASK"))
        else:
            print_indented(instruction(inst), level)

compile_sam(prog)

print_indented(instruction("link", 1))
print_indented(instruction("link", 1))
